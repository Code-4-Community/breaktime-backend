Options:

1. ---------------------------------

- grab list of user ids from CompanyToUsers table in database

a.
- get all users from user pool with ListUsers
- filter the users by userID list on backend

b.
https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html#operation-quotas

- loop through the user ids and sent a ListUsers request for each user ids (rate limit of 30 per second)
- gather all results into a list

------------------------------------

2. ---------------------------------

- store all necessary user data in the CompanyToUsers table in the database
repeated data 

instead of storing list of userIDs, we store a list of user objects

CompanyID [PartitionKey]
Associates (list of User objects)
  - UserName
  - UserEmail
  - etc...

------------------------------------

3. ---------------------------------

- store all necessary user data in the UserToCompanies table

- merge the tables, use the global secondary index

------------------------------------

4.

Rework the tables, add a third table:

CompanyToUsers table

CompanyID [partition key]
UserID [sort key] (could have this be GSI?)
OR 
AssociateIDs (list of IDs)

etc. etc.

Users table
UserId [partition key]
AssociateCompanies (list of ids)
SupervisorCompanies (list of ids)
UserName (attribute)
UserEmail (attribute)
RoleToCompany (supervisor vs. associate)


CompanyData table
CompanyId [partition key]
CompanyName
etc...

------------------------------------

5. --- probably not ---

Cognito Groups - we could use these to represent BOTH roles (supervisor, assoc, admin)
AND also represent companies (McDonalds, Wendy's)

https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListUsersInGroup.html
limit 10000 groups per user pool
limit 100 groups that a user can belong to
ListUsersInGroups() <- method to be called, ListUsersInGroups('McDonalds'), filter to only associates